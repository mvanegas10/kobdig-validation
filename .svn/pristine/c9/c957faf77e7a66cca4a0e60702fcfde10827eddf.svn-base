package kobdig.urbanSimulation;

import kobdig.agent.Agent;

/**
 * Created by Meili on 21/06/2016.
 */
public class Household {

    // ATTRIBUTES

    /**
     * Unique ID for the household
     */
    private String id;

    /**
     * The agent associated to the household
     */
    private Agent agent;

    /**
     * Household's lastname
     */
    private String lastname;

    /**
     * ID of the household's property
     */
    private Property property;

    /**
     * Indicates if the household owns its dwelling or not
     */
    private boolean ownerOccupied;

    /**
     * Purchasing power to buy home
     */
    private double previousPurchasingPower;

    /**
     * Net monthly income to pay rent
     */
    private double previousNetMonthlyIncome;

    /**
     * Purchasing power to buy home
     */
    private double currentPurchasingPower;

    /**
     * Net monthly income to pay rent
     */
    private double currentNetMonthlyIncome;

    /**
     * The quality coefficient in the utility function associated to the household
     */
    private double qualityCoefficient;

    /**
     * The centrality coefficient in the utility function associated to the household
     */
    private double centralityCoefficient;

    /**
     * The proximity coefficient in the utility function associated to the household
     */
    private double proximityCoefficient;

    /**
     * The degree with which the household desires to invest
     */
    private double investDegree;

    // CONSTRUCTOR

    /**
     * Household's constructor
     * @param id The household's id
     * @param agent The BDI agent that represents the household
     * @param lastname The household's last name
     * @param purchasingPower The household's current purchasing power
     * @param netMonthlyIncome The household's current net monthly income
     */
    public Household(String id, Agent agent, String lastname, double purchasingPower, double netMonthlyIncome) {
        this.id = id;
        this.agent = agent;
        this.property = null;
        this.ownerOccupied = false;
        this.lastname = lastname;
        this.previousPurchasingPower = purchasingPower;
        this.previousNetMonthlyIncome = netMonthlyIncome;
        this.currentPurchasingPower = purchasingPower;
        this.currentNetMonthlyIncome = netMonthlyIncome;
        this.qualityCoefficient = Math.random();
        this.centralityCoefficient = Math.random();
        this.proximityCoefficient = Math.random();

        double utility = qualityCoefficient + centralityCoefficient + proximityCoefficient;

        this.qualityCoefficient = qualityCoefficient / utility;
        this.centralityCoefficient = centralityCoefficient / utility;
        this.proximityCoefficient = proximityCoefficient / utility;
    }

    // GETTERS AND SETTERS

    public Agent getAgent() {
        return agent;
    }

    public void setAgent(Agent agent) {
        this.agent = agent;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getLastname() {
        return lastname;
    }

    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    public Property getProperty() {
        return property;
    }

    public void setProperty(Property property) {
        this.property = property;
    }

    public boolean isOwnerOccupied() {
        return ownerOccupied;
    }

    public void setOwnerOccupied(boolean ownerOccupied) {
        this.ownerOccupied = ownerOccupied;
    }

    public double getPreviousPurchasingPower() {
        return previousPurchasingPower;
    }

    public void setPreviousPurchasingPower(double previousPurchasingPower) {
        this.previousPurchasingPower = previousPurchasingPower;
    }

    public double getPreviousNetMonthlyIncome() {
        return previousNetMonthlyIncome;
    }

    public void setPreviousNetMonthlyIncome(double previousNetMonthlyIncome) {
        this.previousNetMonthlyIncome = previousNetMonthlyIncome;
    }

    public double getCurrentPurchasingPower() {
        return currentPurchasingPower;
    }

    public void setCurrentPurchasingPower(double currentPurchasingPower) {
        this.currentPurchasingPower = currentPurchasingPower;
    }

    public double getCurrentNetMonthlyIncome() {
        return currentNetMonthlyIncome;
    }

    public void setCurrentNetMonthlyIncome(double currentNetMonthlyIncome) {
        this.currentNetMonthlyIncome = currentNetMonthlyIncome;
    }

    public double getQualityCoefficient() {
        return qualityCoefficient;
    }

    public void setQualityCoefficient(double qualityCoefficient) {
        this.qualityCoefficient = qualityCoefficient;
    }

    public double getCentralityCoefficient() {
        return centralityCoefficient;
    }

    public void setCentralityCoefficient(double centralityCoefficient) {
        this.centralityCoefficient = centralityCoefficient;
    }

    public double getProximityCoefficient() {
        return proximityCoefficient;
    }

    public void setProximityCoefficient(double proximityCoefficient) {
        this.proximityCoefficient = proximityCoefficient;
    }

    public double getInvestDegree() {
        return investDegree;
    }

    public void setInvestDegree(double investDegree) {
        this.investDegree = investDegree;
    }

    // METHODS

    /**
     * Gives the degree with which the household wants to change home
     * @return the degree with which the household wants to change home
     */
    public double changeHome(){
        //TODO: Determine how the change home attribute would change over time
        return Math.random();
    }

    /**
     * Determines if the household affords buying a given property
     * @param property The property to consider
     * @return true if the household affords buying the given property, false otherwise
     */
    public boolean affordsBuying(Property property){
        if(currentPurchasingPower >= property.getCurrentPrice()) return true;
        return false;
    }

    /**
     * Determines if the household affords renting a given property
     * @param property The property to consider
     * @return true if the household affords renting the given property, false otherwise
     */
    public boolean affordsRenting(Property property){
        if(currentNetMonthlyIncome >= property.getCurrentCapitalizedRent()) return true;
        return false;
    }

    /**
     * Determines whether the household is satisfied in his current state or not
     * @return true if the household is satisfied in his current state, false otherwise
     */
    public boolean isSatified(){
        //TODO: Define which would be the threshold to determine whether the household is satisfied or not
        double rnd = Math.random();
        if (utility() < rnd)
            return true;
        return false;
    }

    /**
     * Determines the utility value for the current state of the household
     * @return The utility value for the current state of the household
     */
    public double utility(){
        double quality = getQuality();
        double centrality = getCentrality();
        double proximity = getProximity();

        return qualityCoefficient * quality + centralityCoefficient * centrality + proximityCoefficient * proximity;
    }

    /**
     * Determines the quality of the current dwelling
     * @return  The quality of the current dwelling
     */
    public double getQuality(){
        //TODO: Define how the quality would be determined
        return Math.random();
    }

    /**
     * Determines the centrality of the current dwelling
     * @return  The centrality of the current dwelling
     */
    public double getCentrality(){
        //TODO: Define how the centrality would be determined
        return Math.random();
    }

    /**
     * Determines the proximity of the current dwelling
     * @return  The proximity of the current dwelling
     */
    public double getProximity(){
        //TODO: Define how the proximity would be determined
        return Math.random();
    }

    /**
     * Determines whether buying a given property is profitable or not, comparing it with the current state
     * @param property The property to consider
     * @return true if buying a the property is profitable, false otherwise
     */
    public boolean buyingRentability(Property property){
        //TODO:Consider more variables to calculate the buying rentability
        double currentMonthlyCosts = (this.property != null)? this.property.getCurrentCapitalizedRent(): 0.0;
        double possibleMonthlyCosts = property.getCurrentCapitalizedRent();
        if(currentMonthlyCosts > possibleMonthlyCosts) return false;
        return true;
    }

    /**
     * Generates a step in the simulation
     * @param time The time in the simulation
     */
    public void step(int time){
        previousPurchasingPower = currentPurchasingPower;
        previousNetMonthlyIncome = currentNetMonthlyIncome;
        currentPurchasingPower = previousPurchasingPower + (previousPurchasingPower*Math.log(time + 1))/20;
        currentNetMonthlyIncome = previousNetMonthlyIncome + (previousPurchasingPower*(0.001));
    }


    public String toString(){
        return id;
    }
}
