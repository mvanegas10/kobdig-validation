package kobdig.urbanSimulation;

import kobdig.agent.Agent;
import kobdig.agent.Fact;
import kobdig.gui.FactParser;
import kobdig.logic.TruthDegree;

/**
 * Created by Meili on 21/06/2016.
 */
public class Household {

    // ATTRIBUTES

    /**
     * Unique ID for the household
     */
    private String id;

    /**
     * The agent associated to the household
     */
    private Agent agent;

    /**
     * Household's lastname
     */
    private String lastname;

    /**
     * ID of the household's property
     */
    private Property property;

    /**
     * Indicates if the household owns its dwelling or not
     */
    private boolean ownerOccupied;

    /**
     * Purchasing power to buy home
     */
    private double previousPurchasingPower;

    /**
     * Net monthly income to pay rent
     */
    private double previousNetMonthlyIncome;

    /**
     * Purchasing power to buy home
     */
    private double currentPurchasingPower;

    /**
     * Net monthly income to pay rent
     */
    private double currentNetMonthlyIncome;

    /**
     * The quality coefficient in the utility function associated to the household
     */
    private double qualityCoefficient;

    /**
     * The centrality coefficient in the utility function associated to the household
     */
    private double centralityCoefficient;

    /**
     * The proximity coefficient in the utility function associated to the household
     */
    private double proximityCoefficient;

    /**
     * The degree with which the household desires to invest
     */
    private double investDegree;


    // CONSTRUCTOR

    /**
     * Household's constructor
     * @param id The household's id
     * @param agent The BDI agent that represents the household
     * @param lastname The household's last name
     * @param purchasingPower The household's current purchasing power
     * @param netMonthlyIncome The household's current net monthly income
     */
    public Household(String id, Agent agent, String lastname, double purchasingPower, double netMonthlyIncome) {
        this.id = id;
        this.agent = agent;
        this.property = null;
        this.ownerOccupied = false;
        this.lastname = lastname;
        this.previousPurchasingPower = purchasingPower;
        this.previousNetMonthlyIncome = netMonthlyIncome;
        this.currentPurchasingPower = purchasingPower;
        this.currentNetMonthlyIncome = netMonthlyIncome;

        this.qualityCoefficient = Math.random();
        this.centralityCoefficient = Math.random();
        this.proximityCoefficient = Math.random();

        double utility = qualityCoefficient + centralityCoefficient + proximityCoefficient;

        this.qualityCoefficient = qualityCoefficient / utility;
        this.centralityCoefficient = centralityCoefficient / utility;
        this.proximityCoefficient = proximityCoefficient / utility;

        this.investDegree = Math.random();
    }

    // GETTERS AND SETTERS

    public Agent getAgent() {
        return agent;
    }

    public void setAgent(Agent agent) {
        this.agent = agent;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public Property getProperty() {
        return property;
    }

    public void setProperty(Property property) {
        this.property = property;
    }

    public double getCurrentPurchasingPower() {
        return currentPurchasingPower;
    }

    public double getCurrentNetMonthlyIncome() {
        return currentNetMonthlyIncome;
    }


    // METHODS

    /**
     * The satisfaction of the household taking into a account a given quality, centrality and proximity factors
     * @param quality The quality factor
     * @param centrality The centrality factor
     * @param proximity The proximity factor
     * @return
     */
    public double getSatisfaction(double quality, double centrality, double proximity){
        return qualityCoefficient * quality + centralityCoefficient * centrality + proximityCoefficient * proximity;
    }

    public void updateBelief(String stringFact){
        FactParser parser = new FactParser(stringFact);
        Fact fact = parser.getFact();
        TruthDegree truthDegree = parser.getTrust();
        agent.updateBeliefs(fact,truthDegree);
        agent.updateDesires();
        agent.updateGoals();
    }

    /**
     * Generates a step in the simulation
     * @param time The time in the simulation
     */
    public void step(int time){
        previousPurchasingPower = currentPurchasingPower;
        previousNetMonthlyIncome = currentNetMonthlyIncome;
        currentPurchasingPower = previousPurchasingPower + (previousPurchasingPower*Math.log(time + 1))/20;
        currentNetMonthlyIncome = previousNetMonthlyIncome + (previousPurchasingPower*(0.001));

        //TODO: Determine how these values will be calculated
        // Updates the changingHome belief
        double ch = Math.random();
        if(ch > 0.5) updateBelief("ch:" + ch);
        else updateBelief("not ch:1");

        // Updates the satisfied belief
        double satisfaction = getSatisfaction(Math.random(),Math.random(),Math.random());
        if(satisfaction > 0.5) updateBelief("sa:" + satisfaction);
        else updateBelief("not sa:1");

        // Updates the invest belief
        updateBelief("i:" + investDegree);

    }

    public String toString(){ return id; }
}
